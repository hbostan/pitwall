// source: protos/car.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.pitwall.Car', null, global);
goog.exportSymbol('proto.pitwall.Car.WorldPosition', null, global);
goog.exportSymbol('proto.pitwall.Participant', null, global);
goog.exportSymbol('proto.pitwall.Session', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pitwall.Car = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pitwall.Car.repeatedFields_, null);
};
goog.inherits(proto.pitwall.Car, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pitwall.Car.displayName = 'proto.pitwall.Car';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pitwall.Car.WorldPosition = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pitwall.Car.WorldPosition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pitwall.Car.WorldPosition.displayName = 'proto.pitwall.Car.WorldPosition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pitwall.Participant = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pitwall.Participant, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pitwall.Participant.displayName = 'proto.pitwall.Participant';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pitwall.Session = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pitwall.Session.repeatedFields_, null);
};
goog.inherits(proto.pitwall.Session, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pitwall.Session.displayName = 'proto.pitwall.Session';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pitwall.Car.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pitwall.Car.prototype.toObject = function (opt_includeInstance) {
    return proto.pitwall.Car.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pitwall.Car} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.pitwall.Car.toObject = function (includeInstance, msg) {
    var f, obj = {
      position: (f = msg.getPosition()) && proto.pitwall.Car.WorldPosition.toObject(includeInstance, f),
      lapTimesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
      currentLapTime: jspb.Message.getFieldWithDefault(msg, 3, 0),
      racePosition: jspb.Message.getFieldWithDefault(msg, 4, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pitwall.Car}
 */
proto.pitwall.Car.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pitwall.Car;
  return proto.pitwall.Car.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pitwall.Car} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pitwall.Car}
 */
proto.pitwall.Car.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.pitwall.Car.WorldPosition;
        reader.readMessage(value, proto.pitwall.Car.WorldPosition.deserializeBinaryFromReader);
        msg.setPosition(value);
        break;
      case 2:
        var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
        msg.setLapTimesList(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setCurrentLapTime(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setRacePosition(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pitwall.Car.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.pitwall.Car.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pitwall.Car} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pitwall.Car.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pitwall.Car.WorldPosition.serializeBinaryToWriter
    );
  }
  f = message.getLapTimesList();
  if (f.length > 0) {
    writer.writePackedUint32(
      2,
      f
    );
  }
  f = message.getCurrentLapTime();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getRacePosition();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pitwall.Car.WorldPosition.prototype.toObject = function (opt_includeInstance) {
    return proto.pitwall.Car.WorldPosition.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pitwall.Car.WorldPosition} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.pitwall.Car.WorldPosition.toObject = function (includeInstance, msg) {
    var f, obj = {
      x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
      y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pitwall.Car.WorldPosition}
 */
proto.pitwall.Car.WorldPosition.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pitwall.Car.WorldPosition;
  return proto.pitwall.Car.WorldPosition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pitwall.Car.WorldPosition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pitwall.Car.WorldPosition}
 */
proto.pitwall.Car.WorldPosition.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readFloat());
        msg.setX(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readFloat());
        msg.setY(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pitwall.Car.WorldPosition.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.pitwall.Car.WorldPosition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pitwall.Car.WorldPosition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pitwall.Car.WorldPosition.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.pitwall.Car.WorldPosition.prototype.getX = function () {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pitwall.Car.WorldPosition} returns this
 */
proto.pitwall.Car.WorldPosition.prototype.setX = function (value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.pitwall.Car.WorldPosition.prototype.getY = function () {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pitwall.Car.WorldPosition} returns this
 */
proto.pitwall.Car.WorldPosition.prototype.setY = function (value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional WorldPosition position = 1;
 * @return {?proto.pitwall.Car.WorldPosition}
 */
proto.pitwall.Car.prototype.getPosition = function () {
  return /** @type{?proto.pitwall.Car.WorldPosition} */ (
    jspb.Message.getWrapperField(this, proto.pitwall.Car.WorldPosition, 1));
};


/**
 * @param {?proto.pitwall.Car.WorldPosition|undefined} value
 * @return {!proto.pitwall.Car} returns this
*/
proto.pitwall.Car.prototype.setPosition = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pitwall.Car} returns this
 */
proto.pitwall.Car.prototype.clearPosition = function () {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pitwall.Car.prototype.hasPosition = function () {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated uint32 lap_times = 2;
 * @return {!Array<number>}
 */
proto.pitwall.Car.prototype.getLapTimesList = function () {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.pitwall.Car} returns this
 */
proto.pitwall.Car.prototype.setLapTimesList = function (value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.pitwall.Car} returns this
 */
proto.pitwall.Car.prototype.addLapTimes = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pitwall.Car} returns this
 */
proto.pitwall.Car.prototype.clearLapTimesList = function () {
  return this.setLapTimesList([]);
};


/**
 * optional uint32 current_lap_time = 3;
 * @return {number}
 */
proto.pitwall.Car.prototype.getCurrentLapTime = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.pitwall.Car} returns this
 */
proto.pitwall.Car.prototype.setCurrentLapTime = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 race_position = 4;
 * @return {number}
 */
proto.pitwall.Car.prototype.getRacePosition = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.pitwall.Car} returns this
 */
proto.pitwall.Car.prototype.setRacePosition = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pitwall.Participant.prototype.toObject = function (opt_includeInstance) {
    return proto.pitwall.Participant.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pitwall.Participant} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.pitwall.Participant.toObject = function (includeInstance, msg) {
    var f, obj = {
      aiControlled: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
      driverId: jspb.Message.getFieldWithDefault(msg, 2, 0),
      teamId: jspb.Message.getFieldWithDefault(msg, 3, 0),
      raceNumber: jspb.Message.getFieldWithDefault(msg, 4, 0),
      nationalityId: jspb.Message.getFieldWithDefault(msg, 5, 0),
      name: jspb.Message.getFieldWithDefault(msg, 6, "")
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pitwall.Participant}
 */
proto.pitwall.Participant.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pitwall.Participant;
  return proto.pitwall.Participant.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pitwall.Participant} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pitwall.Participant}
 */
proto.pitwall.Participant.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setAiControlled(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setDriverId(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setTeamId(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setRaceNumber(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setNationalityId(value);
        break;
      case 6:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pitwall.Participant.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.pitwall.Participant.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pitwall.Participant} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pitwall.Participant.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getAiControlled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getDriverId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getTeamId();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getRaceNumber();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getNationalityId();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional bool ai_controlled = 1;
 * @return {boolean}
 */
proto.pitwall.Participant.prototype.getAiControlled = function () {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pitwall.Participant} returns this
 */
proto.pitwall.Participant.prototype.setAiControlled = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional uint32 driver_id = 2;
 * @return {number}
 */
proto.pitwall.Participant.prototype.getDriverId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pitwall.Participant} returns this
 */
proto.pitwall.Participant.prototype.setDriverId = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 team_id = 3;
 * @return {number}
 */
proto.pitwall.Participant.prototype.getTeamId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.pitwall.Participant} returns this
 */
proto.pitwall.Participant.prototype.setTeamId = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 race_number = 4;
 * @return {number}
 */
proto.pitwall.Participant.prototype.getRaceNumber = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.pitwall.Participant} returns this
 */
proto.pitwall.Participant.prototype.setRaceNumber = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 nationality_id = 5;
 * @return {number}
 */
proto.pitwall.Participant.prototype.getNationalityId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.pitwall.Participant} returns this
 */
proto.pitwall.Participant.prototype.setNationalityId = function (value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string name = 6;
 * @return {string}
 */
proto.pitwall.Participant.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.pitwall.Participant} returns this
 */
proto.pitwall.Participant.prototype.setName = function (value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pitwall.Session.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pitwall.Session.prototype.toObject = function (opt_includeInstance) {
    return proto.pitwall.Session.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pitwall.Session} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.pitwall.Session.toObject = function (includeInstance, msg) {
    var f, obj = {
      participantsList: jspb.Message.toObjectList(msg.getParticipantsList(),
        proto.pitwall.Participant.toObject, includeInstance),
      type: jspb.Message.getFieldWithDefault(msg, 2, 0),
      trackId: jspb.Message.getFieldWithDefault(msg, 3, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pitwall.Session}
 */
proto.pitwall.Session.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pitwall.Session;
  return proto.pitwall.Session.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pitwall.Session} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pitwall.Session}
 */
proto.pitwall.Session.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.pitwall.Participant;
        reader.readMessage(value, proto.pitwall.Participant.deserializeBinaryFromReader);
        msg.addParticipants(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setType(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setTrackId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pitwall.Session.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.pitwall.Session.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pitwall.Session} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pitwall.Session.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getParticipantsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.pitwall.Participant.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getTrackId();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * repeated Participant participants = 1;
 * @return {!Array<!proto.pitwall.Participant>}
 */
proto.pitwall.Session.prototype.getParticipantsList = function () {
  return /** @type{!Array<!proto.pitwall.Participant>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pitwall.Participant, 1));
};


/**
 * @param {!Array<!proto.pitwall.Participant>} value
 * @return {!proto.pitwall.Session} returns this
*/
proto.pitwall.Session.prototype.setParticipantsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pitwall.Participant=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pitwall.Participant}
 */
proto.pitwall.Session.prototype.addParticipants = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pitwall.Participant, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pitwall.Session} returns this
 */
proto.pitwall.Session.prototype.clearParticipantsList = function () {
  return this.setParticipantsList([]);
};


/**
 * optional uint32 type = 2;
 * @return {number}
 */
proto.pitwall.Session.prototype.getType = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pitwall.Session} returns this
 */
proto.pitwall.Session.prototype.setType = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 track_id = 3;
 * @return {number}
 */
proto.pitwall.Session.prototype.getTrackId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.pitwall.Session} returns this
 */
proto.pitwall.Session.prototype.setTrackId = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


goog.object.extend(exports, proto.pitwall);
